"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    students: [Student!]! @all
      subjects: [Subject!]! @all
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
type Student {
  id: ID!
  firstName: String!
  lastName: String!
  birthday: Date!
  address: String!
  department: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type Subject {
  id: ID!
  name: String!
  ects: Int!
  teacher: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  enrollStudent(studentId: ID!, subjectId: ID!): Boolean! @field(resolver: "App\\GraphQL\\Mutations\\EnrollStudentMutation@resolve")
  assignGrade(studentId: ID!, subjectId: ID!, grade: Float!): Boolean! @field(resolver: "App\\GraphQL\\Mutations\\AssignGradeMutation@resolve")
  updateStudent(studentId: ID!, input: UpdateStudentInput!): Student! @field(resolver: "App\\GraphQL\\Mutations\\UpdateStudentMutation@resolve")
    deleteStudent(studentId: ID!): Boolean! @field(resolver: "App\\GraphQL\\Mutations\\DeleteStudentMutation@resolve")

}

input UpdateStudentInput {
  firstName: String
  lastName: String
  birthday: Date
  address: String
  department: String
}
